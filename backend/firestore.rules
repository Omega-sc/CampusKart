// firestore.rules
// Firebase Firestore Security Rules for CampusKart

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users collection — owner can read/write own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Items collection — public read of available items, owner-only writes
    match /items/{itemId} {
      // Allow public reads for available items, or legacy isActive true
      allow read: if resource.data.status == 'available' || resource.data.isActive == true;

      // Authenticated users can create items for themselves (minimal validation)
      allow create: if request.auth != null
                    && request.auth.uid == request.resource.data.sellerId
                    && (request.resource.data.title is string && request.resource.data.title.size() > 0)
                    && (request.resource.data.price is number && request.resource.data.price > 0)
                    && (request.resource.data.category in ['Clothes','Electronics','Books','Cosmetics','Miscellaneous'])
                    && (request.resource.data.condition in ['New','Used','Unused']);

      // Only the owner can update/delete
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.sellerId;
    }

    // Conversations collection — unchanged
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants &&
        request.resource.data.participants.size() == 2;
    }

    // Messages collection — unchanged
    match /messages/{messageId} {
      allow read: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(request.resource.data.conversationId)).data.participants &&
        request.resource.data.message is string &&
        request.resource.data.message.size() > 0;
      allow delete: if request.auth != null && request.auth.uid == resource.data.senderId;
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.senderId ||
        (request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants)
      );
    }

    // Transactions — minimal owner-only access
    match /transactions/{transactionId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if false;
    }

    // Block other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
